<#@ template language="C#" inherits="LightNap.Scaffolding.Templates.BaseTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using <#= Parameters.CoreNamespace #>.Api;
using <#= Parameters.CoreNamespace #>.Data;
using <#= Parameters.CoreNamespace #>.Data.Entities;
using <#= Parameters.CoreNamespace #>.<#= Parameters.NameForNamespace #>.Extensions;
using <#= Parameters.CoreNamespace #>.<#= Parameters.NameForNamespace #>.Interfaces;
using <#= Parameters.CoreNamespace #>.<#= Parameters.NameForNamespace #>.Request.Dto;
using <#= Parameters.CoreNamespace #>.<#= Parameters.NameForNamespace #>.Response.Dto;
using Microsoft.EntityFrameworkCore;

namespace <#= Parameters.CoreNamespace #>.<#= Parameters.NameForNamespace #>.Services
{
    public class <#= Parameters.PascalName #>Service(ApplicationDbContext db) : I<#= Parameters.PascalName #>Service
    {
        public async Task<ApiResponseDto<<#= Parameters.PascalName #>Dto>> Get<#= Parameters.PascalName #>Async(<#= Parameters.IdProperty.BackEndType #> <#= Parameters.IdProperty.CamelName #>)
        {
            var item = await db.<#= Parameters.PascalNamePlural #>.FindAsync(<#= Parameters.IdProperty.CamelName #>);
            return new ApiResponseDto<<#= Parameters.PascalName #>Dto>(item?.ToDto());
        }

        public async Task<ApiResponseDto<PagedResponse<<#= Parameters.PascalName #>Dto>>> Search<#= Parameters.PascalNamePlural #>Async(Search<#= Parameters.PascalNamePlural #>Dto dto)
        {
            var query = db.<#= Parameters.PascalNamePlural #>.AsQueryable();

            // TODO: Update filters and sorting

<# foreach (var property in Parameters.GetProperties) { #>
            if (dto.<#= property.Name #> is not null)
            {
                query = query.Where(item => item.<#= property.Name #> == dto.<#= property.Name #>);
            }

<# } #>
            query = query.OrderBy(item => item.<#= Parameters.IdProperty.Name #>);

            int totalCount = await query.CountAsync();

            if (dto.PageNumber > 1)
            {
                query = query.Skip((dto.PageNumber - 1) * dto.PageSize);
            }

            var items = await query.Take(dto.PageSize).Select(item => item.ToDto()).ToListAsync();

            return new ApiResponseDto<PagedResponse<<#= Parameters.PascalName #>Dto>>(
                new PagedResponse<<#= Parameters.PascalName #>Dto>(items, dto.PageNumber, dto.PageSize, totalCount));
        }

        public async Task<ApiResponseDto<<#= Parameters.PascalName #>Dto>> Create<#= Parameters.PascalName #>Async(Create<#= Parameters.PascalName #>Dto dto)
        {
            <#= Parameters.PascalName #> item = dto.ToCreate();
            db.<#= Parameters.PascalNamePlural #>.Add(item);
            await db.SaveChangesAsync();
            return new ApiResponseDto<<#= Parameters.PascalName #>Dto>(item.ToDto());
        }

        public async Task<ApiResponseDto<<#= Parameters.PascalName #>Dto>> Update<#= Parameters.PascalName #>Async(<#= Parameters.IdProperty.BackEndType #> <#= Parameters.IdProperty.CamelName #>, Update<#= Parameters.PascalName #>Dto dto)
        {
            var item = await db.<#= Parameters.PascalNamePlural #>.FindAsync(<#= Parameters.IdProperty.CamelName #>) ?? throw new UserFriendlyApiException("The specified <#= Parameters.PascalName #> was not found.");
            item.UpdateFromDto(dto);
            await db.SaveChangesAsync();
            return new ApiResponseDto<<#= Parameters.PascalName #>Dto>(item.ToDto());
        }

        public async Task<ApiResponseDto<bool>> Delete<#= Parameters.PascalName #>Async(<#= Parameters.IdProperty.BackEndType #> <#= Parameters.IdProperty.CamelName #>)
        {
            var item = await db.<#= Parameters.PascalNamePlural #>.FindAsync(<#= Parameters.IdProperty.CamelName #>) ?? throw new UserFriendlyApiException("The specified <#= Parameters.PascalName #> was not found.");
            db.<#= Parameters.PascalNamePlural #>.Remove(item);
            await db.SaveChangesAsync();
            return new ApiResponseDto<bool>(true);
        }
    }
}