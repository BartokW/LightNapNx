<#@ template language="C#" inherits="LightNap.Scaffolding.Templates.BaseTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

import { HttpClient } from "@angular/common/http";
import { Injectable, inject } from "@angular/core";
import { API_URL_ROOT, ApiResponse, PagedResponse } from "@core";
import { Create<#= Parameters.PascalName #>Request } from "../models/request/create-<#= Parameters.KebabName #>-request";
import { Search<#= Parameters.PascalNamePlural #>Request } from "../models/request/search-<#= Parameters.KebabNamePlural #>-request";
import { Update<#= Parameters.PascalName #>Request } from "../models/request/update-<#= Parameters.KebabName #>-request";
import { <#= Parameters.PascalName #> } from "../models/response/<#= Parameters.KebabName #>";

@Injectable({
  providedIn: "root",
})
export class DataService {
  #http = inject(HttpClient);
  #apiUrlRoot = `${inject(API_URL_ROOT)}<#= Parameters.PascalNamePlural #>/`;

  get<#= Parameters.PascalName #>(<#= Parameters.IdProperty.CamelName #>: <#= Parameters.IdProperty.ClientTypeString #>) {
    return this.#http.get<ApiResponse<<#= Parameters.PascalName #>>>(`${this.#apiUrlRoot}${<#= Parameters.IdProperty.CamelName #>}`);
  }

  search<#= Parameters.PascalNamePlural #>(request: Search<#= Parameters.PascalNamePlural #>Request) {
    return this.#http.post<ApiResponse<PagedResponse<<#= Parameters.PascalName #>>>>(`${this.#apiUrlRoot}search`, request);
  }

  create<#= Parameters.PascalName #>(request: Create<#= Parameters.PascalName #>Request) {
    return this.#http.post<ApiResponse<<#= Parameters.PascalName #>>>(`${this.#apiUrlRoot}`, request);
  }

  update<#= Parameters.PascalName #>(<#= Parameters.IdProperty.CamelName #>: <#= Parameters.IdProperty.ClientTypeString #>, request: Update<#= Parameters.PascalName #>Request) {
    return this.#http.put<ApiResponse<<#= Parameters.PascalName #>>>(`${this.#apiUrlRoot}${<#= Parameters.IdProperty.CamelName #>}`, request);
  }

  delete<#= Parameters.PascalName #>(<#= Parameters.IdProperty.CamelName #>: <#= Parameters.IdProperty.ClientTypeString #>) {
    return this.#http.delete<ApiResponse<boolean>>(`${this.#apiUrlRoot}${<#= Parameters.IdProperty.CamelName #>}`);
  }
}
