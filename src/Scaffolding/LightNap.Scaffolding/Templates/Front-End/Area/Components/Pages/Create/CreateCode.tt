<#@ template language="C#" inherits="LightNap.Scaffolding.Templates.BaseTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

import { CommonModule } from "@angular/common";
import { Component, inject } from "@angular/core";
import { FormBuilder, ReactiveFormsModule, Validators } from "@angular/forms";
import { ActivatedRoute, Router, RouterLink } from "@angular/router";
import { ButtonModule } from "primeng/button";
import { CardModule } from "primeng/card";
import { Create<#= Parameters.PascalName #>Request } from "src/app/<#= Parameters.KebabName #>/models/request/create-<#= Parameters.KebabName #>-request";
import { <#= Parameters.PascalName #>Service } from "src/app/<#= Parameters.KebabName #>/services/<#= Parameters.KebabName #>.service";
import { ErrorListComponent } from "@core";
import { InputTextModule } from "primeng/inputtext";
import { InputNumberModule } from "primeng/inputnumber";
import { CheckboxModule } from "primeng/checkbox";

@Component({
  standalone: true,
  templateUrl: "./create.component.html",
  imports: [
    CommonModule,
    CardModule,
    ReactiveFormsModule,
    RouterLink,
    ButtonModule,
    InputTextModule,
    InputNumberModule,
    CheckboxModule,
    ErrorListComponent,
  ],
})
export class CreateComponent {
  #<#= Parameters.CamelName #>Service = inject(<#= Parameters.PascalName #>Service);
  #router = inject(Router);
  #activeRoute = inject(ActivatedRoute);
  #fb = inject(FormBuilder);

  errors = new Array<string>();

  form = this.#fb.group({
	// TODO: Update these fields to match the right parameters.
<#  foreach (var property in Parameters.SetProperties) {
        switch (property.ClientTypeString) {
            case "boolean": #>
	<#= property.CamelName #>: this.#fb.control(false),
<#              break;
            case "number": #>
	<#= property.CamelName #>: this.#fb.control(0),
<#              break;
            default:
                if (property.ServerTypeString == "DateTime") { #>
	<#= property.CamelName #>: this.#fb.control("<#= DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss") #>", [Validators.required]),
<#              }
                else if (property.ServerTypeString == "Guid") { #>
	<#= property.CamelName #>: this.#fb.control("<#= Guid.NewGuid().ToString() #>", [Validators.required]),
<#              }
                else { #>
	<#= property.CamelName #>: this.#fb.control("string", [Validators.required]),
<#              }
            break;
        }
    }#>
  });

  createClicked() {
    this.errors = [];

    const request = <Create<#= Parameters.PascalName #>Request>this.form.value;

    this.#<#= Parameters.CamelName #>Service.create<#= Parameters.PascalName #>(request).subscribe(response => {
      if (!response.result) {
        this.errors = response.errorMessages;
        return;
      }

      this.#router.navigate([response.result.<#= Parameters.IdProperty.CamelName #>], { relativeTo: this.#activeRoute.parent });
    });
  }
}
