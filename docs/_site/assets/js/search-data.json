{"0": {
    "doc": "Adding Entities",
    "title": "Extending EF Models",
    "content": "Follow the common EF processes to ensure the changes are correctly integrated: . | Add New Entity Classes: Create new classes in the Data folder that represent the new entities. | Update DbContext: Add DbSet&lt;TEntity&gt; properties to the ApplicationDbContext class for each new entity. | Migrations: Use EF Core migrations to update the database schema. Run dotnet ef migrations add &lt;MigrationName&gt; and dotnet ef database update to apply changes. | Configure Relationships: Define relationships and constraints using Fluent API or data annotations in your entity classes. | . By following these steps, you can effectively extend the data model to meet your application’s requirements. ",
    "url": "/back-end/adding-entities.html#extending-ef-models",
    
    "relUrl": "/back-end/adding-entities.html#extending-ef-models"
  },"1": {
    "doc": "Adding Entities",
    "title": "Adding Entities",
    "content": "LightNap makes use of Entity Framework (EF) for database access. The ApplicationDbContext and supporting entities are all kept in the Data folder of the LightNap.Core project. ",
    "url": "/back-end/adding-entities.html",
    
    "relUrl": "/back-end/adding-entities.html"
  },"2": {
    "doc": "Getting Started",
    "title": "Prerequisites",
    "content": ". | .NET Core SDK | Node.js and npm | Angular CLI | . ",
    "url": "/getting-started.html#prerequisites",
    
    "relUrl": "/getting-started.html#prerequisites"
  },"3": {
    "doc": "Getting Started",
    "title": "Installation",
    "content": ". | Clone the repository: . git clone https://github.com/sharplogic/LightNap.git cd LightNap . | Back-End Setup: . | Navigate to the src directory: . cd src . | Restore .NET Core dependencies: . dotnet restore . | Run the application: . dotnet run --project LightNap.WebApi . | . The application will log the error and quit if anything in the startup or seeding process fails. This includes database migrations and user/role seeding. Please check the logs if a deployment fails to start. | Front-End Setup: . | In a separate terminal, navigate to the lightnap-ng directory: . cd src/lightnap-ng . | Install Angular dependencies: . npm install . | Run the Angular application: . ng serve . | . | . ",
    "url": "/getting-started.html#installation",
    
    "relUrl": "/getting-started.html#installation"
  },"4": {
    "doc": "Getting Started",
    "title": "Usage",
    "content": ". | Access the application at http://localhost:4200. | A default administrator account is created with: . | Email: admin@admin.com | UserName: admin | Password: A2m!nPassword | . | . ",
    "url": "/getting-started.html#usage",
    
    "relUrl": "/getting-started.html#usage"
  },"5": {
    "doc": "Getting Started",
    "title": "Project Structure",
    "content": "Back-End . | LightNap.Core: .NET shared library for common server-side components. | LightNap.Core.Tests: Test library for LightNap.Core. | LightNap.DataProviders.Sqlite: SQLite data provider implementation including migrations and utilities. | LightNap.DataProviders.SqlServer: SQL Server data provider implementation including migrations and utilities. | LightNap.MaintenanceService: .NET Core console project to run maintenance tasks. | LightNap.WebApi: .NET Core Web API project. | . Front-End . | lightnap-ng: Angular project with PrimeNG components based on the sakai-ng template. | . Configuring The Back-End . All back-end configuration can be done from the appsettings.json in LightNap.WebApi. Database . | DatabaseProvider: The database provider to use. | Sqlite requires ConnectionStrings.DefaultConnection to be set. | SqlServer requires ConnectionStrings.DefaultConnection to be set. | InMemory uses the in-memory database and does not persist data between sessions. | . | ConnectionStrings.DefaultConnection: The connection string for the database. | . ApplicationSettings . | ApplicationSettings.AutomaticallyApplyEfMigrations: true to automatically apply Entity Framework migrations. If this is set to false, EF migrations must be manually applied | ApplicationSettings.RequireTwoFactorForNewUsers: true to require two-factor email authentication for new users. It does not change existing users. | ApplicationSettings.SiteUrlRootForEmails: The root URL used in emails. This should be the base URL where the Angular app is hosted from (e.g., https://localhost:4200/ in development). | ApplicationSettings.UseSameSiteStrictCookies: true to use SameSite strict cookies. Set this to false if debugging the front-end from a different URL root (like http://localhost:4200/ for Angular). | . Administrators . If this section is configured then the specified accounts will be seeded with the provided credentials. | Administrators: List of administrator accounts to seed. | Email: The email address of the administrator (e.g., admin@admin.com). | UserName: The username of the administrator (e.g., admin). | Password: The password of the administrator (e.g., A2m!nPassword). If this field is blank or missing then a random password will be generated and the user will need to reset their password via the site. | . | . Jwt . This section defines the configuration of the JWT tokens created for managing authentication. It will work out of the box as configured, but it’s critical that the Key value be changed for at least production environments. | Jwt.Key: The secret key used for JWT token generation (e.g., “Any 32+ Character Key (Like A Guid)”). It should be different across different environments (development vs. production and so on). | Jwt.Issuer: The issuer of the JWT token (e.g., https://www.yourdomain.com). | Jwt.Audience: The audience of the JWT token (e.g., https://www.yourdomain.com). | Jwt.ExpirationMinutes: The expiration time of the JWT token in minutes (e.g., 120). | . Email . | EmailProvider: The email provider to use. | LogToConsole logs messages to the console and is best suited for development. | Smtp requires the Smtp settings. | Smtp.Host: The SMTP server host. (e.g., “smtp.sendgrid.net”) | Smtp.Port: The SMTP server port. (e.g., 587) | Smtp.EnableSsl: Boolean indicating whether to enable SSL for SMTP. (e.g., true) | Smtp.User: The SMTP user. (e.g., “apikey”) | Smtp.Password: The SMTP password or API key. (e.g., “Your SendGrid API Key”) | Smtp.FromEmail: The email address used for sending emails. (e.g., hello@yourdomain.com) | Smtp.FromDisplayName: The display name used for sending emails. (e.g., “LightNap Team”) | . | . | . ",
    "url": "/getting-started.html#project-structure",
    
    "relUrl": "/getting-started.html#project-structure"
  },"6": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": " ",
    "url": "/getting-started.html",
    
    "relUrl": "/getting-started.html"
  },"7": {
    "doc": "In-Memory Provider",
    "title": "Configuration",
    "content": "To use the In-Memory Provider: . | Set the DatabaseProvider setting to InMemory. | . ",
    "url": "/back-end/database-providers/in-memory-provider.html#configuration",
    
    "relUrl": "/back-end/database-providers/in-memory-provider.html#configuration"
  },"8": {
    "doc": "In-Memory Provider",
    "title": "In-Memory Provider",
    "content": "An in-memory database provider is included in the project to make it easier to develop and test the solution. Since the data itself is reset across sessions, it’s not suitable for production use. ",
    "url": "/back-end/database-providers/in-memory-provider.html",
    
    "relUrl": "/back-end/database-providers/in-memory-provider.html"
  },"9": {
    "doc": "Database Providers",
    "title": "Database Providers",
    "content": " ",
    "url": "/back-end/database-providers/",
    
    "relUrl": "/back-end/database-providers/"
  },"10": {
    "doc": "Back-End",
    "title": "Back-End",
    "content": " ",
    "url": "/back-end/",
    
    "relUrl": "/back-end/"
  },"11": {
    "doc": "Front-End",
    "title": "Front-End",
    "content": "Front end… . ",
    "url": "/front-end/",
    
    "relUrl": "/front-end/"
  },"12": {
    "doc": "Home",
    "title": "Home",
    "content": "Getting Started . Web API . Browser App . ",
    "url": "/",
    
    "relUrl": "/"
  },"13": {
    "doc": "SQL Server Data Provider",
    "title": "Configuration",
    "content": "To use SQL Server: . | Set the DatabaseProvider setting to SqlServer. | Set the DefaultConnection connections string. | . For example, in LightNap.WebApi this can be added in Program.cs: . builder.Services.AddLightNapSqlServer(builder.Configuration); . ",
    "url": "/back-end/database-providers/sql-server-provider.html#configuration",
    
    "relUrl": "/back-end/database-providers/sql-server-provider.html#configuration"
  },"14": {
    "doc": "SQL Server Data Provider",
    "title": "Migrations",
    "content": "Use the Entity Framework Core tools to create and apply migrations. Entities are defined in the LightNap.Core project. To add a migration, use the following command from the /src folder: . dotnet ef migrations add &lt;MigrationName&gt; --context ApplicationDbContext --project LightNap.DataProviders.SqlServer --startup-project LightNap.WebApi . Similarly, you can remove the most recent migration using the following command: . dotnet ef migrations remove --project LightNap.DataProviders.SqlServer --startup-project LightNap.WebApi . To apply changes to the database, use the following command: . dotnet ef database update --project LightNap.DataProviders.SqlServer --startup-project LightNap.WebApi . Note that the LightNap.WebApi project also offers automatic migrations by setting the SiteSettings.AutomaticallyApplyEfMigrations to true. Pre-Initial Deployment Changes . Prior to deploying a database you may want to regenerate the entire schema to include your initial changes as a single InitialCreate migration. To do this, use the following commands: . dotnet ef database drop --project LightNap.DataProviders.SqlServer --startup-project LightNap.WebApi dotnet ef migrations remove --project LightNap.DataProviders.SqlServer --startup-project LightNap.WebApi dotnet ef migrations add InitialCreate --context ApplicationDbContext --project LightNap.DataProviders.SqlServer --startup-project LightNap.WebApi dotnet ef database update --project LightNap.DataProviders.SqlServer --startup-project LightNap.WebApi . Note that the drop command above will request confirmation to avoid inadvertently dropping the wrong database. ",
    "url": "/back-end/database-providers/sql-server-provider.html#migrations",
    
    "relUrl": "/back-end/database-providers/sql-server-provider.html#migrations"
  },"15": {
    "doc": "SQL Server Data Provider",
    "title": "SQL Server Data Provider",
    "content": "The LightNap.DataProviders.SqlServer project contains the migrations for a SQL Server database. This project should never need to be manually edited as the migrations are handled by the dotnet ef migrations commands. ",
    "url": "/back-end/database-providers/sql-server-provider.html",
    
    "relUrl": "/back-end/database-providers/sql-server-provider.html"
  },"16": {
    "doc": "SQLite Data Provider",
    "title": "Configuration",
    "content": "To use SQLite: . | Set the DatabaseProvider setting to Sqlite. | Set the DefaultConnection connections string. | . ",
    "url": "/back-end/database-providers/sqlite-provider.html#configuration",
    
    "relUrl": "/back-end/database-providers/sqlite-provider.html#configuration"
  },"17": {
    "doc": "SQLite Data Provider",
    "title": "Migrations",
    "content": "Use the Entity Framework Core tools to create and apply migrations. Entities are defined in the LightNap.Core project. To add a migration, use the following command from the /src folder: . dotnet ef migrations add &lt;MigrationName&gt; --context ApplicationDbContext --project LightNap.DataProviders.Sqlite --startup-project LightNap.WebApi . Similarly, you can remove the most recent migration using the following command: . dotnet ef migrations remove --project LightNap.DataProviders.Sqlite --startup-project LightNap.WebApi . To apply changes to the database, use the following command: . dotnet ef database update --project LightNap.DataProviders.Sqlite --startup-project LightNap.WebApi . Note that the LightNap.WebApi project also offers automatic migrations by setting the SiteSettings.AutomaticallyApplyEfMigrations to true. Pre-Initial Deployment Changes . Prior to deploying a database you may want to regenerate the entire schema to include your initial changes as a single InitialCreate migration. To do this, use the following commands: . dotnet ef database drop --project LightNap.DataProviders.Sqlite --startup-project LightNap.WebApi dotnet ef migrations remove --project LightNap.DataProviders.Sqlite --startup-project LightNap.WebApi dotnet ef migrations add InitialCreate --context ApplicationDbContext --project LightNap.DataProviders.Sqlite --startup-project LightNap.WebApi dotnet ef database update --project LightNap.DataProviders.Sqlite --startup-project LightNap.WebApi . Note that the drop command above will request confirmation to avoid inadvertently dropping the wrong database. ",
    "url": "/back-end/database-providers/sqlite-provider.html#migrations",
    
    "relUrl": "/back-end/database-providers/sqlite-provider.html#migrations"
  },"18": {
    "doc": "SQLite Data Provider",
    "title": "SQLite Data Provider",
    "content": "The LightNap.DataProviders.Sqlite project contains the migrations for a SQLite database. This project should never need to be manually edited as the migrations are handled by the dotnet ef migrations commands. ",
    "url": "/back-end/database-providers/sqlite-provider.html",
    
    "relUrl": "/back-end/database-providers/sqlite-provider.html"
  }
}
